##################Flask一日概括#################
	-配置文件
	-路由系统
	-视图
	-请求
	-响应
	-模板渲染
	-session
	-闪现
	-中间件
	-蓝图(blueprint)
	-特殊装饰器


######配置文件######
	-app.py
		app = Flask(__name__)
		app.config.from_object('settings.Dev')

	-config.py
		class Base(object):
			XX = 123

		class Pro(Base):
			DEBUG = False

		class Dev(Base):
			DEBUG = True


######路由系统######
	-endpoint,设置name值
	-url_for('name', param=param),根据name值反向解析URL
	-动态路由
		@app.route('/index/<int:nid>')
		def index(nid):
			pass


######视图######


######请求######
	请求信息都包含在request中
	request.method
	request.args
	request.form
	request.values
	request.cookies
	request.headers
	request.path
	request.full_path
	request.script_root
	request.url
	request.base_url
	request.url_root
	request.host_url
	request.host
	request.files
	obj = request.files['the_file_name']
	obj.save(路径+文件名)


#######响应######
	return "index"
	return render_template()
	return redirect()
	dic = {'k1': "v1"}
	return jsonify(dic)

	响应体 = make_response('响应')
	响应体.header['xxx'] = 'xxx'
	响应体.set_cookie('key', value)


	##########登录##############
	版本一:
		@app.route('/index')
		def index():
			if not session.get('username', ''):
				return redirect(url_for('login'))
			return reder_template('index.html')

		-应用场景: 一般不用


	版本二(functools.wraps(func)):
		def auto(func):
			@functools.wraps(func)
			def inner(*args, **kwargs):
				if not session.get('username', ''):
					return redirect(url_for('login'))
				ret = func(*args, **kwargs)
				return ret
			return inner

		@app.route('/')
		@app.route('/index', endpoint='index')
		@auto
		def index():
			stud = STUDENT_DICT
			return render_template('index.html', stud=stud)

		-应用场景:比较少的函数中需要额外添加功能


	版本三(before_request):
		-当有请求过来时, 最先执行@app.before_request装饰器函数装饰的内容
		@app.before_request
		def xxxxxx():
			if request.path == '/login':
				return
			if not session.get('username', ''):
				return '滚'


#############模板渲染###############
	基本数据类型: 可以执行python语法, 如:dict.get(), list['xxx']
	传入函数
		-django,自动执行
		-flask, 不自动执行

	定义全局方法
		@app.template_global()
		def func(num):
			return num + 1
		-调用: {{ func(7) }}

		@app.template_filter()
		def func_params(a, b, c):
			return a + b + c
		-调用: {{ 3|func_params(4, 5) }}(有返回值可以进行判断)

	继承:
		父模板(定义被子模板中继承的内容)
			{% block 块名 %}{% endblock %}
		子模板(继承父模板并修改内容)
			{% extends '父模板名称' %}
			{% block 块名 %}修改内容{% endblock %}

	引用:
		{% include '模板名' %}	

	宏定义:
		-定义:
		{% macro func(name, type='text', value='') %}
			<input type="{{ type }}", name="{{ name }}", value="{{ value }}">
		{% endmacro %}
		-调用
		{{ func('n1') }}
		{{ func('n2') }}

	安全
		-前端: {{ u|safe }}
		-后端: Markup('xxx')


#############session###########
	-当请求刚到来时,flask读取cookie中session对应的值
	-将值进行反序列化成字典,放入内存,以便视图函数使用
		session['xxx'] = 123
		session['xxx']
	-当请求结束时,flask会读取内存中字典的值,在进行序列化+加密
	-写入到用户的cookie中


############闪现###########
	-在session中存储一个数据,读取时通过pop将数据移除
	from flask import flash,get_flashed_messages

	def 11111():
		flash('xxx', 'error')
		flash('xxx', 'info')
		return 'xxx'

	def 22222():
		get_flashed_messages(category_filter=['error'])
		return 'xxx'


###########中间件##########
	-call方法
		-当用户发起请求时,才执行
	-任务: 在call方法执行前,后各做一个操作
		class MiddleWare(object):
		"""docstring for MiddleWare"""
		def __init__(self, old):
			self.old = old

		def __call__(self, *args, **kwargs):
			print('前')
			ret = self.old(*args, **kwargs)
			print('后')
			return ret

		if __name__ == '__main__':
			app.wsgi_app = MiddleWare(app.wsgi_app)
			app.run(debug=True)


###########特殊装饰器########
	before_request: 当请求进来时最先执行该装饰器装饰的函数
	after_request: 必须要有个参数,必须要有个返回值, 在请求返回时执行
	before_first_resquest: 启动起来第一次执行
	template_global(): 模板方法(one param)
	tempalte_filter(): 模板方法(params)
	error_handler(404):


#########中间总结########
	-配置文件: 使用字符串导入模块, 自导入大写的变量
	-路由
	-视图: FBV
	-请求
	-响应
		-obj = make_response('asdsadsa')
		-obj.headers['x'] = adsdsa
		-return obj
	-模板


Django和Flask的区别
	-Django是一个大而全的框架,有很多自带的组件
	-Flask是一个短小精悍的框架,有更多的可扩展性
	-都是通过wsgi协议来做的
	-Django的request时通过传参的, Flask的请求是导入的


什么是wsgi
	-web服务接口, wsgi是一个协议
	-实现该协议的模块
		-wsgiref
		-werkzeug
	-实现协议的模块本质上就是一个socket服务端
	-用于接受用户请求, 并处理
	-一般的web框架基于wsgi实现, 这样实现关注点分离

	-wsgiref实例
		from wsgiref.simple_server import make_server

		def run_server(environ, start_response):
			start_response('200 ok', [消息头])
			return [bytes('字符串', endcoding='utf-8')]

		if __name__ == '__main__':
			httpd = make_server('127.0.0.1', 9999, run_server)
			httpd.server_forever()

	-werking实例
		from werkzeug.serving import run_simple
		from werking.wrappers import Response

		def run_server(environ, start_response):
			response = Response('响应体')
			return response(environ, start_response)

		if __name__ == '__main__':
			run_simple('127.0.0.1', 9999, run_server)


Flask提供的功能
	-配置文件
		-所有的配置文件都在app.config
		-app.comfig['xxx'] = xxx
		-新建一个类,在类中写一些静态字段,引入app.config.from_object('类的路径')
		-应用: importlib\getattr
			-django中间件
			-rest framework全局配置
	-session
		-加密后放置到用户浏览器的cookie中
	-闪现
		-局域session实现
	-路由
		-装饰器
		-自定义装饰器放下面
	-视图
		-CBV
	-请求和响应
		-请求: request
		-响应:
			""
			jsonify
			render_template
			redirect

	-模板
	-特殊装饰器
		-before_first_resquest
		-before_request
		-after-request
		-template_flobal()
		-template_filter()
		-errorhandler(404)
	-中间件


##################Flask二日概括#################
	-路由叫视图
	-session实现原理
	-蓝图
	-threading.local
	-上下文管理


#########路由和视图##########
	a.路由设置的两种方式
		@app.route('/index')
		def index():
			return 'index'

		def index():
			return 'index'
		app.add_url_rule('/index', None, index)

		注意事项: 尽量不要让endpoint重名

	b.参数
		rule                 URL规则
		view_func			 视图函数名称
		defaults=None		 默认值,当URL中无参数时,{}
		endpoint=None		 名称,用于反向生成URL
		methods=None		 允许的请求方式
		strict_slashes=None  是否严格在url后加/
		redirect_to='/index' 重定向
		subdomain=None		 子域名访问

	c.CBV
		from flask import Flask, views
		import functools

		app = Flask(__name__)

		def wrapper(func):
			@functools.wraps(func)
			def inner(*args, **kwargs):
				return func(*args, **kwargs)

			return inner

		class UserView(views.MethodView):
			methods = ['GET']  # 指定允许的方法
			decorators = [wrapper,]  # 指定装饰器
			def get(self, *args, **kwargs):
				return "GET"

			def post(self, *args, **kwargs):
				return "POST"


		app.add_url_rule(rule='/user',
						 endpoint=None, 
						 view_func=UserView.as_view('uuuu'))


		if __name__ == '__main__':
			app.run(debug=True)

	d.自定义正则
		见: 07_自定义正则


#########session实现原理(源码)########


###############蓝图#############
	1.创建蓝图
		from flask import Blueprint

		ac = Blueprint('ac', __name__)

		@ac.route('/index')
		def index():
			return 'index'

	2.注册蓝图
		from .views.account import ac
		app.register_blueprint(ac, url_prefix='/api')
		# url_profix给url添加前缀子域名
	
	目标: 给开发者提供目录结构

	其他: 
		- 自定义模板,静态文件
		- 某一类url添加前缀
		- 给一类url添加before_request


#############threading.local#############
	- 与flask没有任何关系
	作用:
		- 为每一个线程创建一个独立的空间
		- 使得线程对自己的空间中的数据进行操作(数据隔离)

	获取线程的唯一标记
		- threading.get_ident()

	根据一个字典自定义一个类似于threading.local功能
		import threading
		import time

		DIC = {} 

		def task(i):
			ident = threading.get_ident()
			if ident in DIC:
				DIC[ident]['xxx'] = i
			else:
				DIC[ident] = {'xxx': i}

			time.sleep(2)
			print(DIC[ident]['xxx'], i)

		for i in range(10):
			t = threading.Thread(target=task, args=(i,))
			t.start()
	
	为每个携程开辟一段时间进行数据隔离
		import threading
		import time
		import greenlet

		DIC = {} 

		def task(i):
			# ident = threading.get_ident()
			ident = greenlet.getcurrent()
			if ident in DIC:
				DIC[ident]['xxx'] = i
			else:
				DIC[ident] = {'xxx': i}

			time.sleep(2)
			print(DIC[ident]['xxx'], i)

		for i in range(10):
			t = threading.Thread(target=task, args=(i,))
			t.start()


#############上下文管理##########


###################Flask三日概括##############
	1. 上下文管理: request
	2. 上下文管理: session
		其他: 
			- app
			- g
	
	3. flask-session组件(第三方)
	4. pymysql操作数据库
		数据库连接池


#############偏函数###########
	import functools

	def index(a1, a2):
		return a1 + a2

	# 将第二个参数绑定到第一个函数的第一个参数上
	new_func = functools.partial(index, 666)

	ret = new_func(10)

	print(ret)


#############super和执行类的区别############
	super会根据mro的顺序去寻找方法
	与直接执行父类方法不同


##########面向对象的特殊方法#########
	class Foo(object):

	def __init__(self):
		# self.storage = {}
		object.__setattr__(self, 'storage', {})

	def __setattr__(self, key, value):
		# print(self.storage)
		print(key, value, self.storage)


	def __getattr__(self, item):
		print(item)

	# pass

	obj = Foo()
	obj.xx = 123


##########栈#########
	class Stack(object):

	def __init__(self):
		self.data = []

	def push(self, val):
		self.data.append(val)

	def pop(self):
		return self.data.pop()

	def top(self):
		return self.data[-1]

	_stack = Stack()
	_stack.push('王花花')
	_stack.push('李栓蛋')

	print(_stack.pop())
	print(_stack.pop())


##########local对象########