1.开发模式

	- 普通开发方式(前后端放在一起)
	- 前后端分离


2.后端开发

	- 为前段提供URL(API/接口的开发)
	- 永远返回JSON数据

	
3.Django FBV CBV

	- FBV: function base view
		简单的函数视图

	- CBV: class base view
		类视图,继承django.views.View	
		基于反射实现根据请求方式不同,执行不同的方法
		原理:
			a.路由
				url --> view方法 --> despatch方法(根据反射执行其他方法: GET/POST/PUT/DELETE)	

		流程
			class StudentsView(MyBaseView, View):

				# def dispatch(self, request, *args, **kwargs):
				# 	# 反射找到对应的函数
				# 	func = getattr(self, request.method.lower())
				# 	# 执行函数
				# 	ret = func(request, *args, **kwargs)
				# 	# 返回执行结果
				# 	return ret

				# def dispatch(self, request, *args, **kwargs):
				# 	print('before')
				# 	ret = super(StudentsView, self).dispatch(request, *args, **kwargs)
				# 	print('after')
				# 	reutrn ret

				def get(self, request, *args, **kwargs):
					return HttpResponse('GET')

				def post(self, request, *args, **kwargs):
					return HttpResponse('POST')

				def put(self, request, *args, **kwargs):
					return HttpResponse('POST')

				def delete(self, request, *args, **kwargs):
					return HttpResponse('POST')

		继承(多个类公共的功能,为避免重复的编写)
			class MyBaseView(object):
				def dispatch(self, request, *args, **kwargs):
					print('before')
					ret = super(MyBaseView, self).dispatch(request, *args, **kwargs)
					print('after')
					reutrn ret


			class StudentsView(MyBaseView, View):

				# def dispatch(self, request, *args, **kwargs):
				# 	# 反射找到对应的函数
				# 	func = getattr(self, request.method.lower())
				# 	# 执行函数
				# 	ret = func(request, *args, **kwargs)
				# 	# 返回执行结果
				# 	return ret

				# def dispatch(self, request, *args, **kwargs):
				# 	print('before')
				# 	ret = super(StudentsView, self).dispatch(request, *args, **kwargs)
				# 	print('after')
				# 	reutrn ret

				def get(self, request, *args, **kwargs):
					return HttpResponse('GET')

				def post(self, request, *args, **kwargs):
					return HttpResponse('POST')

				def put(self, request, *args, **kwargs):
					return HttpResponse('POST')

				def delete(self, request, *args, **kwargs):
					return HttpResponse('POST')



			class TeachersView(MyBaseView, View):

				# def dispatch(self, request, *args, **kwargs):
				# 	# 反射找到对应的函数
				# 	func = getattr(self, request.method.lower())
				# 	# 执行函数
				# 	ret = func(request, *args, **kwargs)
				# 	# 返回执行结果
				# 	return ret

				# def dispatch(self, request, *args, **kwargs):
				# 	print('before')
				# 	ret = super(TeachersView, self).dispatch(request, *args, **kwargs)
				# 	print('after')
				# 	reutrn ret

				def get(self, request, *args, **kwargs):
					return HttpResponse('GET')

				def post(self, request, *args, **kwargs):
					return HttpResponse('POST')

				def put(self, request, *args, **kwargs):
					return HttpResponse('POST')

				def delete(self, request, *args, **kwargs):
					return HttpResponse('POST')


	- 面试题
		1.Django中间件
			- process_request
			- process_view
			- process_response
			- process_exception
			- process_render_template

		2. 使用中间件做过什么
			- 权限
			- 用户登录验证
			- Django的csrf是如何实现的?
				在process_views中验证
					from django.views.decrators.csrf import csrf_exempt
					@csrf_exempt
					def index_view(request):
						# 该视图函数免除对csrf的验证
				去请求体或cookie中获取csrf_token

		3.
			情况一:
				MIDDLEWARE = [
				    'django.middleware.security.SecurityMiddleware',
				    'django.contrib.sessions.middleware.SessionMiddleware',
				    'django.middleware.common.CommonMiddleware',
				    'django.middleware.csrf.CsrfViewMiddleware',  # 全站使用csrf认证
				    'django.contrib.auth.middleware.AuthenticationMiddleware',
				    'django.contrib.messages.middleware.MessageMiddleware',
				    'django.middleware.clickjacking.XFrameOptionsMiddleware',
				]

				from django.views.decrators.csrf import csrf_exempt
					@csrf_exempt
					def index_view(request):
						# 该视图函数免除对csrf的验证

			情况二:
				MIDDLEWARE = [
				    'django.middleware.security.SecurityMiddleware',
				    'django.contrib.sessions.middleware.SessionMiddleware',
				    'django.middleware.common.CommonMiddleware',
				    # 'django.middleware.csrf.CsrfViewMiddleware',  # 全站不使用csrf认证
				    'django.contrib.auth.middleware.AuthenticationMiddleware',
				    'django.contrib.messages.middleware.MessageMiddleware',
				    'django.middleware.clickjacking.XFrameOptionsMiddleware',
				]

				from django.views.decrators.csrf import csrf_protect
					@csrf_protect
					def index_view(request):
						# 该视图函数进行csrf的验证


	- CBV小知识, csrf时需要使用
		- @method_decorator(csrf_exempt)
		- 需要加载dispatch上, 单独方法无效
		- 或加载类上, @method_decorator(csrf_exempt, name='dispatch')

		from django.shortcuts import render, HttpResponse
		from django.views.decorators.csrf import csrf_exempt, csrf_protect
		from django.utils.decorators import method_decorator


		class StudentsView(View):
			@method_decorator(csrf_exempt)  # 不使用csrf验证
			def dispatch(self, request, *args, **kwargs):
				ret = super(StudentsView, self).dispatch(request, *args, **kwargs)
				reutrn ret

			def get(self, request, *args, **kwargs):
				return HttpResponse('GET')

			def post(self, request, *args, **kwargs):
				return HttpResponse('POST')

			def put(self, request, *args, **kwargs):
				return HttpResponse('POST')

			def delete(self, request, *args, **kwargs):
				return HttpResponse('POST')

	- 总结
		- 本质: 基于反射来实现
		- 流程: 路由, view, dispatch(反射)
		- 取消csrf认证, 需要将装饰器加到dispatch方法上, 并且使用method_decorator装饰

		扩展:
			- csrf
				- 基于中间件的process_view方法
				- 装饰器给单独函数进行设置(认证或免除认证)


4.restful规范(建议)
	1. 域名
	2. 版本
	3. 路径
	4. 方法
	5. 过滤
	6. 状态码
	7. 错误类型
	8. 返回结果
	9. Hypermedia API, 即返回结果中提供连接
	

面向对象
	继承: 继承一个多个父类的方法和属性
		广度优先(新式类)
		深度优先(经典类)

	封装: 将一类的方法封装到一个类中, 或者在构造方法中封装属性
	多态: 每个对象所调用的方法, 其返回值都不一定相同


Django请求的生命周期
	请求进来到wsgi, 再到中间件, 路由, 再到视图


Django请求的声明周期(包含了rest framework框架)
	请求进来到wsgi, 再到中间件, 路由, 再到视图(CBV)
	dispatch


5.django rest framework框架
	pip3 install djangorestframework

	a. 认证
		- 仅使用
			USER_INFO = {
				'1': {
					'name': '张亚瀚',
					'age': 18,
					'gender': '男',
				},
				'2': {
					'name': '王花花',
					'age': 18,
					'gender': '女',
				},
				'3': {
					'name': '李狗蛋',
					'age': 18,
					'gender': '男',
				},}


			from rest_framework.views import APIView
			from rest_framework.authentication import BasicAuthentication
			from rest_framework import exceptions

			class MyAuthentication(object):
				def authenticate(self, request):
					#获取用户名和密码
					token = request._request.GET.get('token')
					if not token:
						raise exceptions.AuthenticationFailed('用户未登录')
					return ('zyh', None)  # 返回的对象存放在request.user中

				def authenticate_header(self, val):
					pass


			class UserView(APIView):
				
				authentication_classes = [MyAuthentication,]

				def get(self, request, *args, **kwargs):
					print(request)
					print(request.user)
					return HttpResponse(json.dumps({'code': 200, 'data': USER_INFO}, ensure_ascii=False))

				def post(self, request,  *args, **kwargs):
					pass

				def put(self, request,  *args, **kwargs):
					pass

				def delete(self, request,  *args, **kwargs):
					pass	
		

		- 源码流程
			dispatch入口





################################################


鸭子模型

	class WX:
		def send():
			pass

	class Email:
		def send():
			pass

	class Msg():
		def send():
			pass

	def func(arg):
		arg.send()


wsgi
	web server 服务借口, wsgi, 协议

	wsgiref 实现了wsgi协议的一个模块, 模块本质, 就是一个socket服务端
	wsgizeng 实现了wsgi协议的一个模块, 模块本质, 就是一个socket服务端(flask)
	tornado 自己的

	uwsgi部署时用的, 实现了wsgi协议的一个模块, 模块本质, 就是一个socket服务端



- 认证
	a. 问题1: 有些api需要用户登录之后才能访问, 有些无需登录

	b. 基本使用认证组件
		解决:
			a. 创建用户表和Token表进行一对一关联
			b. 用户登录(返回token并存进数据库)
	
	c. 认证流程原理
		见图: authentication/webwxgetmsgimg.jpeg

	d. 再看一遍源码
		1. 局部视图使用和全局使用
			在settings中配置(全局使用)
				REST_FRAMEWORK = {  # 配置全局认证的类
				    "DEFAULT_AUTHENTICATION_CLASSES": ["api.utils.auth.MyAuthentication",],
				    # "UNAUTHENTICATED_USER": lambda: "匿名用户", request.user的值
				    "UNAUTHENTICATED_USER": None,  # request.user
				    "UNAUTHENTICATED_TOKEN": None,  # request.auth
				}

		当某个视图不使用时
			在单独的类中添加静态字段
				authentication_classes = []

	e. 内置认证类
		1. 认证类, 必须继承from rest_framework.authentication import BaseAuthentication
		2. 其他认证, BasicAuthentication

	梳理:
		1. 使用
			- 创建类, 继承from rest_framework.authentication import BaseAuthentication

			- 类中必须有两个方法def authenticate(self, request):, def authenticate_header(self, request):

			- 返回值: 
				- None: 下一个认证来执行
				- raise: from rest_framework import exceptions 
						 raise exceptions.AuthenticationFailed('token vlaue is not find')
				- (元素1, 元素2): 元素1赋值给request.user, request.auth

			- 局部使用: 在当前的视图中写一个静态字段 authentication_classes = [MyAuthentication, ]

			- 全局使用: 
				REST_FRAMEWORK = {  # 配置全局认证的类
				    "DEFAULT_AUTHENTICATION_CLASSES": ["api.utils.auth.MyAuthentication",],
				    # "UNAUTHENTICATED_USER": lambda: "匿名用户", request.user的值
				    "UNAUTHENTICATED_USER": None,  # request.user
				    "UNAUTHENTICATED_TOKEN": None,  # request.auth
				}


		2. 源码流程
			- dispatch
				- 封装request
					- 获取定义的认证的类(全局/局部), 通过列表生成式创建对象
				- initial
					- perform_authentication
						request.user(内部循环...)



- 权限
	a. 问题: 不同的视图有不同的权限

	b. 权限的基本使用
		- 写一个权限类, 类中必须有has_permission(self, request, view)方法, 返回bool值
		- 在使用权限的视图中添加静态字段  permission_classes = [权限类,]  # 权限

	c. 源码流程(入口dispatch)

	d. 总结
		1. 使用
			- 类, 必须继承BasePermission, 必须有has_permission
				from rest_framework.permissions import BasePermission

				class SVIPPermission(BasePermission):

					message = "必须是SVIP才能访问"
					def has_permission(self, request, view):
						if request.user.user_type != 3:
							return False
						return True

			- 返回值, Bool值

			- 局部(类中加字段)
				permission_classes = [permission.OrdinaryPermission, ]

			- 全局
				REST_FRAMEWORK = {
				    "DEFAULT_PERMISSION_CLASSES": ["api.utils.permission.SVIPPermission", ],  # 权限
				}


		2. 源码流程



- 节流(访问频率控制)
	a. 问题: 控制访问频率

	b. 使用
		- 创建一个类
			class VisitThrottle(object):

				def __init__(self):
					self.history = None

				def allow_request(self, request, view):
					# 获取用户ip
					# remote_addr = request._request.META.get("REMOTE_ADDR")
					remote_addr = request.META.get("REMOTE_ADDR")
					stime = time.time()
					if remote_addr not in VISIT_RECORD:
						VISIT_RECORD[remote_addr] = [stime,]
						return True

					history = VISIT_RECORD.get(remote_addr)
					self.history = history  # 将当前用户的访问列表赋值给self.history

					while history and history[-1] < stime - 60:
						# 如果history中有值和history的最早一次访问记录比当前时间-60秒小, 将history的-1pop
						history.pop()

					if len(history) < 3:
						history.insert(0, stime)
						return True
					# return True  # 表示可以访问
					# return False  # 表示访问频率太高,被限制

				def wait(self):
					"""
					还需要等多少秒可以访问
					"""
					s_time = time.time() 
					return 60 - (s_time-self.history[-1])	

		- 在使用的视图中添加静态字段
			throttle_classes = [VisitThrottle, ]

	c. 源码流程
		...

	d. 内置的控制频率类
		class VisitThrottle(SimpleRateThrottle):
			scope = "zyh"  # key

			def get_cache_key(self, request, view):
				return self.get_ident(request)


		class UserThrottle(SimpleRateThrottle):
			scope = "zyhuser"  # key

			def get_cache_key(self, request, view):
				return request.user.username

		应用:
			REST_FRAMEWORK = {
			    "DEFAULT_THROTTLE_CLASSES": ["api.utils.throttle.UserThrottle", ],  # 节流
			    "DEFAULT_THROTTLE_RATES": {
			        "zyh": "3/m",
			        "zyhuser": "10/m",
			    },
			}


	e. 梳理
		1. 基本使用
			创建一个类, 继承from rest_framework.throttling import BaseThrottle
			类中必须有allow_request方法和wait方法, 在使用的视图中添加throttle_classes=[]静态字段

		2. 全局使用
			创建一个类, 继承from rest_framework.throttling import SimpleRateThrottle
			类中必须要有一个scope属性, 用来作为查找配置的key进行设置
			还需要一个get_cache_key方法, 并需要返回一个记录该用户的标识作为key
			配置:
				REST_FRAMEWORK = {
				    
				    "DEFAULT_THROTTLE_CLASSES": ["api.utils.throttle.UserThrottle", ],  # 节流
				    "DEFAULT_THROTTLE_RATES": {
				        "zyh": "3/m",  # 配置的key的值
				        "zyhuser": "10/m",   # 配置的key的值
				    },
				}


rest framework 认证流程(封装Request)
rest framework 权限流程
rest framework 节流流程


- 版本
	a. URL中通过GET传参
		- 自定义(URL:http://127.0.0.1:8000/api/user/?version=v1)
			from django.shortcuts import render, HttpResponse
			from rest_framework.views import APIView
			from rest_framework.versioning import BaseVersioning

			# Create your views here.

			class ParamVersion(object):

				def determine_version(self, request, *args, **kwargs):
					return request.query_params.get('version')


			class UserView(APIView):

				versioning_class = ParamVersion

				def get(self, request, *args, **kwargs):
					# version = request._request.GET.get('version')
					# version = request.query_params.get('version')
					version = request.version
					print(version)

					return HttpResponse('xxx')

		- 内置(URL:http://127.0.0.1:8000/api/user/?version=v1)
			from django.shortcuts import render, HttpResponse
			from rest_framework.views import APIView
			from rest_framework.versioning import BaseVersioning, QueryParameterVersioning

			# Create your views here.

			class UserView(APIView):

				versioning_class = QueryParameterVersioning  # 使用内置的获取版本的类, 需要在配置中设置

				def get(self, request, *args, **kwargs):
					version = request.version
					print(version)

					return HttpResponse('xxx')

			- 配置
				REST_FRAMEWORK = {
				    "DEFAULT_VERSION": "v1",  # 默认的版本
				    "ALLOWED_VERSIONS": ["v1", "v2"],  # 允许的版本
				    "VERSION_PARAM": "version",  # 版本参数的键
				}

	b. 使用URL路径获取版本(推荐)
		路由:
			urlpatterns = [
				url(r"^(?P<version>[v1|v2]+)/user/$", views.UserView.as_view()),  # 使用URL获取版本号
			]

		配置:
			REST_FRAMEWORK = {
			    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
			    "DEFAULT_VERSION": "v1",  # 默认的版本
			    "ALLOWED_VERSIONS": ["v1", "v2"],  # 允许的版本
			    "VERSION_PARAM": "version",  # 版本参数的键
			}

		获取:
			class UserView(APIView):

				def get(self, request, *args, **kwargs):
					version = request.version  # 使用URL获取版本号, 仍然实在request.version中
					print(version)

					return HttpResponse('xxx')

	c. 总结
		- 使用:
			配置文件:
				REST_FRAMEWORK = {
				    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
				    "DEFAULT_VERSION": "v1",  # 默认的版本
				    "ALLOWED_VERSIONS": ["v1", "v2"],  # 允许的版本
				    "VERSION_PARAM": "version",  # 版本参数的键
				}

			路由系统:
				urlpatterns = [
				    # url(r'^admin/', admin.site.urls),
				    url(r'^api/', include("api.urls")),
				]

				urlpatterns = [
					url(r"^(?P<version>[v1|v2]+)/user/$", views.UserView.as_view(), name="user"),  # 使用URL获取版本号

				]

			视图文件:
				from django.shortcuts import render, HttpResponse
				from rest_framework.views import APIView
				from rest_framework.versioning import BaseVersioning, QueryParameterVersioning, URLPathVersioning
				from django.urls import reverse

				# Create your views here.

				class UserView(APIView):

					# versioning_class = QueryParameterVersioning  # 使用内置的获取版本的类, 需要在配置中设置
					# versioning_class = URLPathVersioning  # 使用URL路径方式获取版本类, 需在路由中配置

					def get(self, request, *args, **kwargs):
						version = request.version  # 使用URL获取版本号, 仍然实在request.version中
						print(version)
						print(request.versioning_scheme)  # 使用的版本类的对象, 对象中有一个reverse方法用于反向生成对象(rest_framework)
						print(request.versioning_scheme.reverse(viewname="user", request=request))  # 参数为别名和版本号

						print(reverse(viewname="user", kwargs=({"version":version})))  # 基于Django内置

						return HttpResponse('xxx')


- 解析器
	前戏, django的request.body和request.POST



- 序列化
	- 请求数据进行校验
	- QuerySet进行序列化

- 分页


- 路由


- 视图


- 渲染器



