服务端功能划分
    a.负责与浏览器收发消息
    b.根据用户访问不同的路径执行不同的函数
    c.从Html读取出内容,并且完成字符串的替换


Python中Web框架的分类
    框架自带a,b,c              -----------> Tornado
    框架自带b和c,使用第三方的a   -----------> Django
    框架自带b,使用第三方的a和c   -----------> Flask


一个完整的请求流程
    a.启动服务器,等待客户端(用户的浏览器)来连接
    b.在浏览器地址输入URL,与服务器建立连接,浏览器发送请求
    c.服务器收到请求消息,解析请求消息,根据路径和函数的对应关系,找到将要执行的函数
    d.执行函数,打开HTML文件,进行字符串替换,得到一个最终要返回的HTML内容
    e.按照HTTP协议的消息格式要求,把HTML内容回复给用户浏览器(发送响应)
    f.浏览器收到响应的消息之后,按照HTML的规则渲染页面
    g.关闭连接


新建一个Django项目
django-admin startproject 项目名


form表单提交
    input标签必须有name属性
    在form表单中添加{% csrf_token %}进行跨站点
    后端接收数据request.POST.get('name属性值')












- 模板
    - 利用Django模板语言内置的static方法获取
        {% load static %}
    - 利用内置的get_static_prefix获取静态文件的路径前缀,自己进行拼接
        {% get_static_prefix %}
        获取的settings文件中的STATIC_URL变量
    - as语法(一个路径多次用到,可以使用as保存到一个变量,可以多次使用)


    自定义filter
        from django import template
        register = template.Library()

        # 注册
        @register.filter(name='sb')
        def add_sb(arg):
            return "{} sb.".format(arg)
        
        @register.filter(name='addstr')
        """
        第一个参数永远是管道符前面的那个变量
        :param arg:  管道前面那个变量
        :param arg2: 冒号后面引号里面的编程
        """
        def add_sb(arg, arg2):
            return "{} {}.".format(arg, arg2)

        在模板中{% load 自定义filter文件名 %}进行引入,才能使用



    自定义simpletag
        #################### python代码
        from django import template

        register = template.Library()


        @register.simple_tag(name='my_sum')
        def my_sum(arg1, arg2, arg3):
            return'{} {} {}'.format(arg1, arg2, arg3)

        #########################模板代码
        {% load 自定义simpletag文件名 %}
        {% name名 '参数1' '参数2' ... %}



    自定义inclusion_tag
        - 有用于返回html代码
        @register.inclusion_tag('xxx.html')
        def xxx(arg):
            return {'data': arg}

        xxx.html
            {% for i in data %}
                {{ i }}
            {% endfor %}

        home.html
            {% xxx pattern %}


- 视图
    - CBV(class base view)和FBV(function base view)
        
    - request对象(请求相关的所有数据都在里面)
        - GET             通常用来获取url里的参数
        - POST            通常获取form表单的参数
        - method          获取请求的方法
        - path_info       获取请求的路径
        - body            如果是post请求获取请求体bytes

    - 上传文件
        <form action="{% url 'upload' %}", method="post" enctype="multipart/form-data"></form>

        def upload(request):
        if request.method == 'POST':
            # 获取文件的名字
            filename = request.FILES.get('file1').name

            # 在当前打开文件开始写
            with open(filename, 'wb') as f:
                # 使用文件对象.chunrs()获取文件内容
                for i in request.FILES['file1'].chunks():
                    f.write(i)


            return HttpResponse('OK')


- 响应response
    基础必备三件套
    a,b,c 都是从django.shortcuts中打入
    a. HttpResponse      返回字符串
    b. render            返回一个html页面
    c. redirect          重定向,告诉浏览器去访问另一个网页
    d. JsonResponse      用来生成json编码的响应
        - from django.http import JsonResponse
        - return JsonResponse(data, safe=Flase)
        - 默认都是返回字典格式
        - safe参数为Flase表示可以是任何格式


- 路由系统


- ORM(关系对象映射)
    - Django-ORM常用字段
        1. AutoFiled        自增列
        2. CharFiled        字符串,必须要有max_length
        3. ForeigKey        外键
        4. ManytoManyField  多对多
        5. IntegerField     整数
        6. DateFiled        日期
        7. DateTimeField    时间日期


    - Django-ORM不常用字段
        1. AutoField(primary_key=True)      自增列
        2. BigAutoField(primary_key=True)   big类型的自增列
        3. SmallIntgerField()               小整数,-32768 ~ 32767
        4. PositiveSmallIntgerFiled()       正整数
        5. BigIntgerField()                 长整型
        6. BoolField()                      布尔类型
        7. NullBoolField()                  可以为空的布尔值
        8. IPAddressField()
        9. URLField()
        10.SlugFiled()
        11.UUIDField()
        12.FilePathField()                  文件路径
        13.DurationField()                  时间间隔
        14.DecimelField(max_digits, decimal_place)
    

    - 自定义字段
        class FixedCharField(models.Field):
        """
        自定义char类型的字段类
        """

        def __init__(self, max_length, *args, **kwargs):
            self.max_length = max_length
            super(FixedCharField, self).__init__(max_length=max_length,
                                                 *args,
                                                 **kwargs)

        def db_type(self, connection):
            """
            限定生成数据库表的字段类型为char, 长度为max_length指定的值
            """

            return 'char(%s)' % self.max_length


    - Django-ORM常用选项
        1. auto_now         每次更新数据时默认当前时间
        2. auto_now_add     创建记录时默认当前时间
        3. null             表示该字段可以为空
        4. unique           表示该字段为唯一索引,值不可以重复
        5. db_index         表示该字段为索引字段
        6. default          默认值
        
        7. to               表示关联的表,默认id字段
        8. to_field         自定义关联字段
        9. related_name     反向查询时的字段名
        10.on_delete        级联动作
            - models.CASCADE       删除关联数据,与之关联也删除
            - models.DO_NOTHING    删除关联数据,引发IntgerrityError
            - models.PROTECT       删除关联数据,引发ProtectErrpr
            - models.SET_NULL      删除关联数据,与之关联设置为null
            - models.SET_DEFAULT   删除关联数据,与之关联设置为默认值
            - models.SET
                a. 与之关联的值设置为指定值,SET(值)
                b. 与之关联的值设置为可执行对象的返回值
        11.db_constraint    改为Flase表示关联的外键没有约束   


    - ORM操作
        
        添加数据
            1. new_object = xxx.object.create(attribute=value)

            2. new_object = xxx()
               new_object.attribute = value
               new_object.save()

            3. dic = {'attribute': 'value'}
               new_object = xxx(**dic)
               new_object.save()
        
        修改数据
            使用get获取对象,对象.属性修改,对象.save()
            updata_info = xxx.object.filter(xxx).updata(attr=value)
            updata_info.save()

        删除数据
            使用get获取对象,对象.delete()删除
            del_obj = xxx.object.filter(xxx)
            del_obj.delete()

        Query_set对象
            all()                     查询所有结果
            filter()                  包含了与所给条件相匹配的对象
            exclude()                 包含了与筛选条件不匹配的对象
            values()                  返回一个字典
            values_list()             返回一个列表
            order_by()                排序
            reverse()                 翻转
            distinct()
            select_related()          优化一对一, 多对一的查询语句          
                Employee.objects.select_related().values('name', 'department__name')

            prefetch_related()        优化多对多, 一对多的查询语句
                Employee.objects.prefetch_related().values('name', 'department__name')

            bulk_create(objs, num)    批量创建数据
                objs = [models.Book(title=沙河{}.format(i)) for i in range(100)]
                models.Book.objects.bulk_create(objs, 10)


        具体对象
            get()                     返回符合条件的一条数据
            first()                   返回查询到的第一条数据
            last()                    返回查询到的最后一条数据


        bool值
            exists()                 判断是否存在


        具体数值
            count()                  返回记录条数


        双下划线操作
            __gt                     大于
            __gte                    大于等于
            __lt
            __lte
            __in                     包含
            __range                  betwwn之间
            __contains               不包含
            __icontains              忽略大小写
            __startswith             开头
            __endswith               结尾
            __year                   判断时间年
            __month                  判断时间月
            __day                    判断时间日


        外键查询
            正向查询
                基于对象
                    obj = models.xxx.object.get(id=1)
                    obj.xxx

                基于双下划线
                    models.xxx.object.filter(id=1).vaules('xxx__field')

            反向查询
                基于对象
                    obj = models.xxx.object.get(id=1)
                    obj.xxx_set.all()
                    如果在外键中设置了related_name='books'
                    obj.books.all()

                基于双下划线
                    models.xxx.object.filter(id=1).values('xxx__field')
                    如果在外键中设置了related_name='books'
                    models.xxx.object.filter(id=1).values('books__field')


        分组和聚合
            - 聚合: 根据某个字段进行聚合
                from django.db.models import Avg, Sum, Min, Max, Count
                models.xxx.object.all().aggregate(Avg(field))

            - 分组: 将一类的数据进行分组
                models.xxx.object.all().annotate(xxx=Count(field))

                
            - 单表分组聚合
                SELECT dept, AVG(salary) AS avg FROM employee 
                GROUP BY dept

                Employee.objects.values('dept').annotate(avg=Avg('salary'))

            - 多表分组聚合
                select department.name, Avg(employee.salary) from employee 
                inner join department 
                on (employee.department_id=department.id) 
                group by department.name;
                
                Employee.objects
                .values('department_id')
                .annotate(avg=Avg('salary'))
                .values('department__name', 'avg')





        F和Q

            F查询在查询的过程中获取字段的值
            
            Q查询在查询的过程中可以进行或比较 Q() | Q()
            默认的filter参数都是(且)操作


        事务(一件事开始到结束)
            
            from django.db import transaction
            with tarsaction.atomic():
                # 在with语句下的ORM操作视为一个原子性操作
                # 当语句发生错误时,回滚到最原始的状态
            except Exception as e:
                print(e)


        执行原生的SQL语句


- ORM OneToOne关联
    - 当一张表的某些字段查询的比较频繁,另外一些字段查询的不是特别频繁
      把不怎么常用的字段,单独拿出来做成一张表进行一对一关联

    - 即保证数据都完整的保存下来,又能保证大部分的检索更快
    
    - 和外键类似,但是多了一个不能重复的约束

    - OneToOneField(to='xxx')


- ORM ManyToMany关联
    - 多对多的三种方式
        1. ORM ManToManyField自动生成第三张表
            - 关系表中没有额外的字段
            - field = models.ManyToMany(to='xxx')

        2. 手动添加一张关系表, 分别关联那两张表

        3. ORM ManyToManyField的through属性指定表名(自己创建的关系表)
            - 关系表中有额外的字段(需要一些额外字段保存有用的数据)
            - 注意事项:
                through_fields=(field1, field2)
                field是关系表通过那个字段可以找到ManyToMany指定的表
                没有ORM封装的方法


- Csrf简单用法
    - 跨站点请求访问
    - 防止跨站请求访问
    - {% csrf_token %}

    问题:
        1. 钓鱼网站的页面和正经网站的页面对浏览器来说有什么区别?(页面怎么来的)
            钓鱼网站的页面是由 钓鱼网站的服务端给你返回的
            正经网站的页面是由 正经网站的服务端给你返回的
    
        2. Django中内置了一个专门处理csrf问题的中间件
           django.middleware.csrf.CsrfViewMiddleware

           这个中间件做的事情
               1. 在render返回页面的时候,在页面中塞一个隐藏的input标签

               2. 当提交POST数据的时候,帮你做校验,如果校验未通过就拒绝这次请求
                

- 分页 /home/zyh/Python/webFramework/Django/Paging.py


- Cookie和Session
    - Cookie
        由于HTTP协议是无状态的,cookie和session是用来保存用户状态的
        cookie是保存在浏览器上的,session是保存在客户端的 

        cookie是默认关闭浏览器就失效了 
        set_cookie()   
        get_cookie()
        set_signed_cookie()
        get_signed_cookie()
        delete_cookie()

    - Session
        Session是依赖Cooie的,保存在服务端的键值对
        
        dsadsadsada: {"is_active": 1, "username": "zyh"}
        ewwfdefwfde: {"is_active": 1, "username": "whh"}
        

        存Session
            1.生成一个随机字符串为键的字典
            2.将用户的信息存到上面的字典中
            3.将随机字符串作为Cookie发送到前端
        去Session
            1.从Cookie中取出随机字符串
            2.从Session中取出与随机字符串将匹配的字典

        request.session['key'] = value  # 设置session
        request.session.get['key']  # 获取session
        request.session.flush()  # 删除session和cookie
        request.session.delete()  # 只删除session
        requset.session.clear_expired()  # 将所有session有效期小于今天的数据删除 
        request.session.set_expiry(value)  # 设置超时时间
    
        Session的配置
            - 数据库Session
                SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # 引擎(默认)

            - 缓存Session
                SESSION_ENGINE = 'django.contrib.sessions.backends.cache'  # 引擎
                SESSION_CACHE_ALLAS = 'default'                            # 使用的缓存别名(默认内存缓存,也可以是memcache)
                                                                             此处别名依赖缓存的设置
            
            - 文件Session
                SESSION_ENGINE = 'django.contrib.session.backends.file'  # 引擎
                SESSION_FILE_PATH = None                                 # 缓存文件路径,如果为None,则使用tempfile模块
                                                                           获取一个临时地址tempfile.gettempfir()
            
            - 缓存+数据库
                SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'  # 引擎

            - 加密Cooie Session
                SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'  # 引擎

            - 其他公用设置项
                SESSION_COOKIE_NAME = 'sessionid'                           # session的cookie保存在浏览器上时的key
                SESSION_COOKIE_PATH = '/'                                   # session的cookie保存的路径(默认)
                SESSION_COOKIE_DOMAIN = None                                # session的cookie保存的域名(默认)
                SESSION_COOKIE_SECURE = False                               # 是否HTTPS传输Cookie(默认)
                SESSION_COOKIE_HTTPONLY = True                              # 是否session的cookie只支持http传输(默认)
                SESSION_COOKIE_AGE = 120960                                 # Session的cookie失效时间(2周)(默认)
                SESSION_EXPIPE_AT_BROWSER_CLOSE = Flase                     # 是否关闭浏览器使得Session过期(默认)
                SESSION_SAVE_EVERY_REQUEST = Flase                          # 是否每次请求都保存Session,默认修改之后才保存(默认)
        

- CBV中的装饰器
    类方法装饰器和函数装饰器的区别
        类方法的第一个参数永远是self,而函数装饰器的第一个参数是自己定义的
    
    类装饰器
        from django.utils.decorators import method_decorator
        使用method_decorator装饰器进行装饰
        @method_decorator(装饰器函数)
        def 类方法(self):
            pass

        或者直接给类加装饰器
        @method_decorator(装饰器函数, name='method')

        
        @method_decorator(wapper)  
        # 如果想给类中所有方法加装饰器,可以直接给disoatch方法加,dispatch为最先执行的方法
        def dispatch(self, request, *args, **kwargs):
            return super(UserInfo, sefl).dispatch(request, *args, **kwargs)

    如果想不校验csrf_token, 加上装饰器csrf_exempt
    如果想指定某个视图函数做csrf的校验, 加上csrf_protect装饰器
    from django.views.decorators.csrf import csrf_exempt, csrf_protect


- JSON


- AJAX
    异步请求跨站点问题
        1. 将csrf_token的值获取到一起发送到后台

        2. 通过获取返回的cookie中的字符串放置到请求头中(需要引入jquery.cookie.js插件)
            $.ajax({
            url: 'xxx',
            type: 'POST',
            header: {'X-CSRFToken': $.cookie('csrftoken')},  // 从Cookie取csrf_token,并设置ajax请求头
            data: {"username": xxx, "password": xxx},
            success: function (data) {
                xxxx
            }
            })

        3. 自己写js脚本
            见: file:/home/zyh/Python/webFramework/Django/csrfToken.js
            只需在HTML中引用即可


- 序列化
    Django内置的serializers


- sweetalert插件
    - swal("标题", "内容", "方法")
    方法:
        - success  成功
        - warning  警告
        - info     
        - error    失败
    官网: http://lipis.github.io/bootstrap-sweetalert/


- AJAX
    $.ajax({
        url: xxx,
        type: xxx,
        dataType: 'json',
        traditional: True,  # 数组
        data: xxxxx,
        success: function () {}
    })





- Form表单组件
    - 普通web开发模式, 以注册为例
        1. 要有一个注册的页面, 页面里面要有form表单         --->   生成HTML代码
        2. form表单要能提交数据到后端, 后端要做有效性校验    --->   数据有效性校验
        3. 要把校验的提示信息展示在页面上                  --->   校验信息返回并展示,保存原来填写的内容
        
        关于校验:
            1. 前端通过JS代码做校验    --->  最好有
            2. 后端做校验             --->  必须要有(因为前端的校验可以被跳过)
    

    - Form组件的用法
        1. from django import forms
        2. 定义一个form类
            class RegForm(forms.Form):
                user = forms.CharField()  # 文字字段
                pwd = forms.CharField()
                email = forms.EmailField()  # 邮箱字段

        生成HTML
            3. 实例化一个forms对象, 传递到模板语言中
            4. 在目标语言中调用form对象的响应方法和属性

            三种方式:
                1. 使用自带样式
                    {{ form_obj.as_p }}
                2. 单独写(自定义样式)
                    控件的label头{{ form_obj.field.label }}
                    控件的input框{{ form_obj.field }}
                    控件的错误信息{{ form_obj.field.errors.0 }}

        做校验
            1. form_obj = Regform(request.POST)
            2. form_obj.is_valid()

        取信息
            所有的数据都在form_obj.cleaned_data是一个字典

        存数据
            models.objects.create(**form_obj.cleaned_data)


    - Form组件的字段(常用)
        forms.CharField()                   # 普通文字框
        forms.EmailField()                  # 邮箱框
        forms.ChoiceField()                 # 枚举/单选/单选下拉框
        froms.MultipleChoiceField()   # 多选/多选下拉框


    - Form字段的属性
        label="xxx"                         # label头
        choices=((1, ""),)                  # 多选条件,一般用在单选/多选中
        initial                             # 默认Input框显示的信息
            - initial=3                     # 枚举框/单选下拉框
            - initial=[1, 3]                # 多选框/多选下拉框
            - initial="checked"             # 单选框
        max_length=6                        # 文本最大长度
        min_length=6                        # 文本最小长度
        error_messages={}                   # 错误信息,与定义的规则相符合
        widget=forms.forms.TextInput        # 小部件
        validators=[]                       # 校验


    - Widget小部件(为Form字段属性)
        - 字段/方法(当不定义额外属性时为方法)
            forms.TextInput()               # 普通文本框
            forms.PasswordInput()           # 密码框
            forms.RadioSelect()             # 枚举框,一般定义在forms.ChoiceField()中
            forms.Select()                  # 单选下拉框,一般定义在forms.ChoiceField()中
            forms.SelectMultiple()          # 多选下拉框,一般定义在froms.forms.MultipleChoiceField()中
            forms.CheckboxInput()           # 单选框,一般定义在forms.ChoiceField()中
            forms.CheckboxSelectMultiple()  # 多选框,一般定义在froms.forms.MultipleChoiceField()中

        - 字段中的属性
            attrs={"class": "c1"}           # 定义标签属性
            render_value=True               # 多用于密码框,当输入不符合规则时,保留输入的内容


    - Django内置正则校验
        1. 需导入正则类
            from django.core.validators import RegexValidator
            RegexValidator("正则表达式", "错误信息")

        2. 在字段属性中添加validators
            phone = forms.CharField(
                label='手机号',
                max_length=11,
                min_length=11,
                # 自定义校验规则
                validators=[RegexValidator(r'^[0-9]+$', '请输入数字'),
                            RegexValidator(r'^1[3-9][0-9]{9}+$', '必须以159开头')],
            )


    - 自定义验证(源码)
        form_obj.is_valid()都干了什么

        生成两个空字典
            self._errors = ErrorDict()  ------->  {} 用来放错误消息
            self.cleaned_data = {}      ------->  {} 用来放校验通过的数据

        执行三个方法

            self._clean_fields()
                循环了一个self.fields().items()
                字段名    字段对象

                如果有错误:
                    self._errors["name"] = ""

                没有错误    
                    self.cleaned_data["name"] = value (就是用户填写的值)

                如果都没有报错最后会执行一个钩子函数
                    value = getattr(self, 'clean_%s' % name)()
                    self.cleaned_data[name] = value

                所以在继承forms.Form的类中定义一个以clean_开头字段名结尾的方法
                导入 from django.core.exceptions import ValidationError
                def clean_username(self):
                    value = self.cleaned_data["username"]  # 获取每个字段的value(用户填写的)
                    if '金瓶梅' in value:
                        raise ValidationError('这个名字不符合社会主义核心价值观!')
                    return value


            self._clean_form()  
                # 调用对象的.clean()方法, 但是默认对象继承的clean方法, 
                  啥都没干, 到想让他干点什么的时候, 就可以重写这个方法

                # 重写父类的clean方法, 自定义验证方式并抛出异常
                def clean(self):
                    # 此时通过校验的数据都保存在self.cleaned_data中
                    passowrd = self.cleaned_data.get("password")
                    re_password = self.cleaned_data.get('re_password')
                    if passowrd != re_password:
                        self.add_error('re_password', ValidationError('两次密码不一致'))
                        raise ValidationError('两次密码不一致')
                    else:
                        return self.cleaned_data


            self._post_clean()


    - 从数据库中获取chooies
        city = forms.ChoiceField(
            choices=(models.City.objects.all().values_list("id", "city_name"),),
            label="城市",
            initial=1,
            widget=forms.widgets.Select,) # 单选下拉框

        # 重写init方法
        def __init__(self, *args, **kwargs):
            super(RegForm, self).__init__(*args, **kwargs)
            # 每次加载时从数据库更新字段
            self.fields['city'].widget.choices = models.City.objects.all().values_list("id", "city_name")



- 中间件
    两个需求
        1. URL的白名单 url = ['/xx/', '/oo/']
        2. 登录之后才能访问某些URL      -->   之前使用装饰器

    中间件的定义
        中间件是一个用来处理Django的请求和响应的框架级别的钩子
        他是一个轻量, 低级别的插件系统, 用于在全局范围内改变Django的输入和输出
        每个中间件都负责做一些特定的功能, 但是由于其影响的是全局,
        所以需要谨慎使用, 使用不当会影响性能

        说白了就是在wsgi之后 urls.py之前 在全局操作Django请求和响应的模块


    中间件的使用
        5个固定的方法
            process_request(self, reuqest)                                   # 请求进来时执行的方法(重要)
                执行顺序:
                    执行顺序为正序执行
                何时执行:
                    当请求进来时
                返回值
                    process_request方法的返回值可以是None或一个HttpResponse对象, 
                    如果是None, 则继续按照Django定义的规则向后继续执行, 
                    如果是HttpResponse对象,则直接返回给用户
                

            process_views(self, request, view_func, view_args, view_lwargs)  # 视图
                执行顺序:
                    正序执行
                何时执行:
                    在urls.py中找到对应关系之后, 在执行真正的视图函数之前执行
                返回值
                    返回None则继续执行, 返回HttpResponse则直接返回给用户


            process_exception(self, request, exception)                      # 错误
                执行顺序:
                    倒序执行
                何时执行:
                    只有在视图函数出现异常时执行
                返回值:
                    返回None,执行后续中间件的process_exception方法
                    返回HttpResponse对象, 直接返回给用户

            process_template_response(self, request, response)               # 模板
                执行顺序:
                   倒序执行
                何时执行:
                    视图函数执行完, 在执行函数返回的响应对象的render方法之前执行
                返回值:
                    返回None,执行后续中间件的process_template_response方法
                    返回HttpResponse对象, 直接返回给用户

            process_response(self, request, response)                        # 响应回去时执行的方法(重要)
                执行顺序:
                    执行顺序为倒序执行
                何时执行:
                    当有响应时执行
                返回值:
                    process_response方法的返回值必须是HttpResponse对象
                    它有两个参数, 一个request, 一个response, 
                    request对象都一样, response是视图函数返回的HttpResponse对象
                

        Django调用注册中间件中五个方法的顺序
            1. process_request
            2. process_views   
            3. 有异常, process_exception
            4. 如果视图函数返回对象有render方法, process_template_response
            5. process_response




        找一个地方写一个类
            from django.utils.deprecation import MiddlewareMixin

            class SelfMiddleWare(MiddlewareMixin):
                # 在这里写方法
                # 上面的五个方法
                def process_request(self, request):
                    pass






  